#BlueJ class context
comment0.target=CircularList
comment0.text=\r\n\ An\ interface\ for\ a\ cursor\ based\ circular\ list.\r\n\r\n\ @param\ <E>\ the\ data\ type\ the\ collection\ uses\r\n\ @author\ RIT\ CS\r\n
comment1.params=element
comment1.target=void\ append(java.lang.Object)
comment1.text=\r\n\ Append\ a\ new\ element\ to\ the\ end\ of\ the\ list.\r\n\r\n\ @param\ element\ the\ new\ element\ to\ append\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ Returns\ a\ string\ in\ the\ format\:\r\n\ <pre>\r\n\ \ \ \ \ Player\ &lt;--\ CURSOR\r\n\ \ \ \ \ Player\r\n\ \ \ \ \ Player\r\n\ \ \ \ \ ...\r\n\ </pre>\r\n\ Where\ "&lt;--\ CURSOR"\ points\ to\ the\ player\ at\ the\ cursor.\r\n\ <br>\r\n\ If\ the\ list\ is\ empty\:\r\n\ <pre>\r\n\ \ \ \ \ Empty\ list\!\r\n\ </pre>\r\n\r\n\ Very\ important\!\ \ Use\ System.lineSeparator()\ instead\ of\ "\\n"\ when\ adding\r\n\ a\ new\ line\!\!\!\r\n
comment2.params=
comment2.target=int\ size()
comment2.text=\r\n\ Returns\ the\ size\ of\ the\ list.\r\n\r\n\ @return\ the\ number\ of\ elements\ in\ the\ list\r\n
comment3.params=
comment3.target=boolean\ valid()
comment3.text=\r\n\ Is\ the\ cursor\ pointing\ to\ a\ valid\ element\ in\ the\ list?\r\n\r\n\ @return\ whether\ the\ cursor\ is\ valid\ or\ not\r\n
comment4.params=
comment4.target=void\ reset()
comment4.text=\r\n\ Reset\ the\ cursor\ to\ point\ to\ the\ head\ of\ the\ list\r\n\ (if\ one\ exists),\ otherwise\ set\ it\ to\ be\ off\ the\ list\ (invalid)\r\n
comment5.params=
comment5.target=void\ forward()
comment5.text=\r\n\ Move\ the\ cursor\ forward\ to\ the\ next\ element.\r\n\r\n\ @throws\ AssertionError\ if\ the\ cursor\ is\ off\ the\ list,\r\n\ "can't\ forward\ cursor,\ the\ list\ is\ empty\!"\r\n
comment6.params=
comment6.target=void\ backward()
comment6.text=\r\n\ Move\ the\ cursor\ backward\ to\ the\ next\ element.\r\n\r\n\ @throws\ AssertionError\ if\ the\ cursor\ is\ off\ the\ list,\r\n\ "can't\ backward\ cursor,\ the\ list\ is\ empty\!"\r\n
comment7.params=
comment7.target=java.lang.Object\ get()
comment7.text=\r\n\ Get\ the\ element\ at\ the\ cursor\ position.\r\n\r\n\ @throws\ AssertionError\ if\ the\ cursor\ is\ off\ the\ list,\r\n\ "can't\ get,\ cursor\ is\ off\ the\ list\!"\r\n\ @return\ the\ element\ at\ the\ cursor\r\n
comment8.params=
comment8.target=java.lang.Object\ removeForward()
comment8.text=\r\n\ Remove\ the\ element\ at\ the\ cursor\ and\ then\ advance\ it\ forward\r\n\ to\ the\ next\ element.\r\n\r\n\ @throws\ AssertionError\ if\ the\ cursor\ is\ off\ the\ list,\r\n\ "can't\ removeForward,\ cursor\ is\ off\ the\ list\!"\r\n\ @return\ the\ element\ at\ the\ cursor\r\n
comment9.params=
comment9.target=java.lang.Object\ removeBackward()
comment9.text=\r\n\ Remove\ the\ element\ at\ the\ cursor\ and\ then\ advance\ it\ forward\r\n\ to\ the\ next\ element.\r\n\r\n\ @throws\ AssertionError\ if\ the\ cursor\ is\ off\ the\ list,\r\n\ "can't\ removeBackward,\ cursor\ is\ off\ the\ list\!"\r\n\ @return\ the\ element\ at\ the\ cursor\r\n
numComments=11
